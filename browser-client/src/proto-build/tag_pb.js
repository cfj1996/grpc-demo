// source: tag.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.tag.AddTagRequest', null, global);
goog.exportSymbol('proto.tag.AddTagResponse', null, global);
goog.exportSymbol('proto.tag.DelTagRequest', null, global);
goog.exportSymbol('proto.tag.DelTagResponse', null, global);
goog.exportSymbol('proto.tag.EditTagRequest', null, global);
goog.exportSymbol('proto.tag.EditTagResponse', null, global);
goog.exportSymbol('proto.tag.FindTagRequest', null, global);
goog.exportSymbol('proto.tag.FindTagResponse', null, global);
goog.exportSymbol('proto.tag.GetTagAllRequest', null, global);
goog.exportSymbol('proto.tag.GetTagAllResponse', null, global);
goog.exportSymbol('proto.tag.List', null, global);
goog.exportSymbol('proto.tag.Tag', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tag.AddTagRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tag.AddTagRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tag.AddTagRequest.displayName = 'proto.tag.AddTagRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tag.AddTagResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tag.AddTagResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tag.AddTagResponse.displayName = 'proto.tag.AddTagResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tag.DelTagRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tag.DelTagRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tag.DelTagRequest.displayName = 'proto.tag.DelTagRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tag.DelTagResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tag.DelTagResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tag.DelTagResponse.displayName = 'proto.tag.DelTagResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tag.EditTagRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tag.EditTagRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tag.EditTagRequest.displayName = 'proto.tag.EditTagRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tag.EditTagResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tag.EditTagResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tag.EditTagResponse.displayName = 'proto.tag.EditTagResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tag.FindTagRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tag.FindTagRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tag.FindTagRequest.displayName = 'proto.tag.FindTagRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tag.FindTagResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tag.FindTagResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tag.FindTagResponse.displayName = 'proto.tag.FindTagResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tag.GetTagAllRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tag.GetTagAllRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tag.GetTagAllRequest.displayName = 'proto.tag.GetTagAllRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tag.GetTagAllResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tag.GetTagAllResponse.repeatedFields_, null);
};
goog.inherits(proto.tag.GetTagAllResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tag.GetTagAllResponse.displayName = 'proto.tag.GetTagAllResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tag.Tag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tag.Tag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tag.Tag.displayName = 'proto.tag.Tag';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tag.List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tag.List.repeatedFields_, null);
};
goog.inherits(proto.tag.List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tag.List.displayName = 'proto.tag.List';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tag.AddTagRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tag.AddTagRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tag.AddTagRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.AddTagRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    listid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tag.AddTagRequest}
 */
proto.tag.AddTagRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tag.AddTagRequest;
  return proto.tag.AddTagRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tag.AddTagRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tag.AddTagRequest}
 */
proto.tag.AddTagRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setListid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tag.AddTagRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tag.AddTagRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tag.AddTagRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.AddTagRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getListid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of AddTagRequest as accepted by the `fromObject` method.
 * @record
 */
proto.tag.AddTagRequest.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.listid;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.tag.AddTagRequest.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.tag.AddTagRequest}
 */
proto.tag.AddTagRequest.fromObject = function(obj) {
  var msg = new proto.tag.AddTagRequest();
  obj.name != null && jspb.Message.setField(msg, 2, obj.name);
  obj.listid != null && jspb.Message.setField(msg, 3, obj.listid);
  return msg;
};
}

/**
 * optional string name = 2;
 * @return {string}
 */
proto.tag.AddTagRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.AddTagRequest} returns this
 */
proto.tag.AddTagRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string listId = 3;
 * @return {string}
 */
proto.tag.AddTagRequest.prototype.getListid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.AddTagRequest} returns this
 */
proto.tag.AddTagRequest.prototype.setListid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tag.AddTagResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tag.AddTagResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tag.AddTagResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.AddTagResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    listid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tag.AddTagResponse}
 */
proto.tag.AddTagResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tag.AddTagResponse;
  return proto.tag.AddTagResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tag.AddTagResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tag.AddTagResponse}
 */
proto.tag.AddTagResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setListid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tag.AddTagResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tag.AddTagResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tag.AddTagResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.AddTagResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getListid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of AddTagResponse as accepted by the `fromObject` method.
 * @record
 */
proto.tag.AddTagResponse.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.listid;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.tag.AddTagResponse.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.tag.AddTagResponse}
 */
proto.tag.AddTagResponse.fromObject = function(obj) {
  var msg = new proto.tag.AddTagResponse();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.name != null && jspb.Message.setField(msg, 2, obj.name);
  obj.listid != null && jspb.Message.setField(msg, 3, obj.listid);
  return msg;
};
}

/**
 * optional string id = 1;
 * @return {string}
 */
proto.tag.AddTagResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.AddTagResponse} returns this
 */
proto.tag.AddTagResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.tag.AddTagResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.AddTagResponse} returns this
 */
proto.tag.AddTagResponse.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string listId = 3;
 * @return {string}
 */
proto.tag.AddTagResponse.prototype.getListid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.AddTagResponse} returns this
 */
proto.tag.AddTagResponse.prototype.setListid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tag.DelTagRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tag.DelTagRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tag.DelTagRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.DelTagRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tag.DelTagRequest}
 */
proto.tag.DelTagRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tag.DelTagRequest;
  return proto.tag.DelTagRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tag.DelTagRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tag.DelTagRequest}
 */
proto.tag.DelTagRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tag.DelTagRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tag.DelTagRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tag.DelTagRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.DelTagRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DelTagRequest as accepted by the `fromObject` method.
 * @record
 */
proto.tag.DelTagRequest.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.tag.DelTagRequest.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.tag.DelTagRequest}
 */
proto.tag.DelTagRequest.fromObject = function(obj) {
  var msg = new proto.tag.DelTagRequest();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  return msg;
};
}

/**
 * optional string id = 1;
 * @return {string}
 */
proto.tag.DelTagRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.DelTagRequest} returns this
 */
proto.tag.DelTagRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tag.DelTagResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tag.DelTagResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tag.DelTagResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.DelTagResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tag.DelTagResponse}
 */
proto.tag.DelTagResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tag.DelTagResponse;
  return proto.tag.DelTagResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tag.DelTagResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tag.DelTagResponse}
 */
proto.tag.DelTagResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tag.DelTagResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tag.DelTagResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tag.DelTagResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.DelTagResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DelTagResponse as accepted by the `fromObject` method.
 * @record
 */
proto.tag.DelTagResponse.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.success;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.tag.DelTagResponse.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.tag.DelTagResponse}
 */
proto.tag.DelTagResponse.fromObject = function(obj) {
  var msg = new proto.tag.DelTagResponse();
  obj.success != null && jspb.Message.setField(msg, 1, obj.success);
  return msg;
};
}

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.tag.DelTagResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tag.DelTagResponse} returns this
 */
proto.tag.DelTagResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tag.EditTagRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tag.EditTagRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tag.EditTagRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.EditTagRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    listid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tag.EditTagRequest}
 */
proto.tag.EditTagRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tag.EditTagRequest;
  return proto.tag.EditTagRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tag.EditTagRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tag.EditTagRequest}
 */
proto.tag.EditTagRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setListid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tag.EditTagRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tag.EditTagRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tag.EditTagRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.EditTagRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getListid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of EditTagRequest as accepted by the `fromObject` method.
 * @record
 */
proto.tag.EditTagRequest.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.listid;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.tag.EditTagRequest.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.tag.EditTagRequest}
 */
proto.tag.EditTagRequest.fromObject = function(obj) {
  var msg = new proto.tag.EditTagRequest();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.name != null && jspb.Message.setField(msg, 2, obj.name);
  obj.listid != null && jspb.Message.setField(msg, 3, obj.listid);
  return msg;
};
}

/**
 * optional string id = 1;
 * @return {string}
 */
proto.tag.EditTagRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.EditTagRequest} returns this
 */
proto.tag.EditTagRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.tag.EditTagRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.EditTagRequest} returns this
 */
proto.tag.EditTagRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string listId = 3;
 * @return {string}
 */
proto.tag.EditTagRequest.prototype.getListid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.EditTagRequest} returns this
 */
proto.tag.EditTagRequest.prototype.setListid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tag.EditTagResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tag.EditTagResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tag.EditTagResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.EditTagResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    listid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tag.EditTagResponse}
 */
proto.tag.EditTagResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tag.EditTagResponse;
  return proto.tag.EditTagResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tag.EditTagResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tag.EditTagResponse}
 */
proto.tag.EditTagResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setListid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tag.EditTagResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tag.EditTagResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tag.EditTagResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.EditTagResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getListid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of EditTagResponse as accepted by the `fromObject` method.
 * @record
 */
proto.tag.EditTagResponse.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.listid;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.tag.EditTagResponse.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.tag.EditTagResponse}
 */
proto.tag.EditTagResponse.fromObject = function(obj) {
  var msg = new proto.tag.EditTagResponse();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.name != null && jspb.Message.setField(msg, 2, obj.name);
  obj.listid != null && jspb.Message.setField(msg, 3, obj.listid);
  return msg;
};
}

/**
 * optional string id = 1;
 * @return {string}
 */
proto.tag.EditTagResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.EditTagResponse} returns this
 */
proto.tag.EditTagResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.tag.EditTagResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.EditTagResponse} returns this
 */
proto.tag.EditTagResponse.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string listId = 3;
 * @return {string}
 */
proto.tag.EditTagResponse.prototype.getListid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.EditTagResponse} returns this
 */
proto.tag.EditTagResponse.prototype.setListid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tag.FindTagRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tag.FindTagRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tag.FindTagRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.FindTagRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tag.FindTagRequest}
 */
proto.tag.FindTagRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tag.FindTagRequest;
  return proto.tag.FindTagRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tag.FindTagRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tag.FindTagRequest}
 */
proto.tag.FindTagRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tag.FindTagRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tag.FindTagRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tag.FindTagRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.FindTagRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of FindTagRequest as accepted by the `fromObject` method.
 * @record
 */
proto.tag.FindTagRequest.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.tag.FindTagRequest.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.tag.FindTagRequest}
 */
proto.tag.FindTagRequest.fromObject = function(obj) {
  var msg = new proto.tag.FindTagRequest();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  return msg;
};
}

/**
 * optional string id = 1;
 * @return {string}
 */
proto.tag.FindTagRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.FindTagRequest} returns this
 */
proto.tag.FindTagRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tag.FindTagResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tag.FindTagResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tag.FindTagResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.FindTagResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    listid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    list: (f = msg.getList()) && proto.tag.List.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tag.FindTagResponse}
 */
proto.tag.FindTagResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tag.FindTagResponse;
  return proto.tag.FindTagResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tag.FindTagResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tag.FindTagResponse}
 */
proto.tag.FindTagResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setListid(value);
      break;
    case 4:
      var value = new proto.tag.List;
      reader.readMessage(value,proto.tag.List.deserializeBinaryFromReader);
      msg.setList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tag.FindTagResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tag.FindTagResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tag.FindTagResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.FindTagResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getListid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getList();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tag.List.serializeBinaryToWriter
    );
  }
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of FindTagResponse as accepted by the `fromObject` method.
 * @record
 */
proto.tag.FindTagResponse.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.listid;

  /** @type {?|undefined} */
  this.list;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.tag.FindTagResponse.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.tag.FindTagResponse}
 */
proto.tag.FindTagResponse.fromObject = function(obj) {
  var msg = new proto.tag.FindTagResponse();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.name != null && jspb.Message.setField(msg, 2, obj.name);
  obj.listid != null && jspb.Message.setField(msg, 3, obj.listid);
  obj.list && jspb.Message.setWrapperField(
      msg, 4, proto.tag.List.fromObject(obj.list));
  return msg;
};
}

/**
 * optional string id = 1;
 * @return {string}
 */
proto.tag.FindTagResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.FindTagResponse} returns this
 */
proto.tag.FindTagResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.tag.FindTagResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.FindTagResponse} returns this
 */
proto.tag.FindTagResponse.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string listId = 3;
 * @return {string}
 */
proto.tag.FindTagResponse.prototype.getListid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.FindTagResponse} returns this
 */
proto.tag.FindTagResponse.prototype.setListid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional List list = 4;
 * @return {?proto.tag.List}
 */
proto.tag.FindTagResponse.prototype.getList = function() {
  return /** @type{?proto.tag.List} */ (
    jspb.Message.getWrapperField(this, proto.tag.List, 4));
};


/**
 * @param {?proto.tag.List|undefined} value
 * @return {!proto.tag.FindTagResponse} returns this
*/
proto.tag.FindTagResponse.prototype.setList = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tag.FindTagResponse} returns this
 */
proto.tag.FindTagResponse.prototype.clearList = function() {
  return this.setList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tag.FindTagResponse.prototype.hasList = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tag.GetTagAllRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tag.GetTagAllRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tag.GetTagAllRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.GetTagAllRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tag.GetTagAllRequest}
 */
proto.tag.GetTagAllRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tag.GetTagAllRequest;
  return proto.tag.GetTagAllRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tag.GetTagAllRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tag.GetTagAllRequest}
 */
proto.tag.GetTagAllRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagesize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tag.GetTagAllRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tag.GetTagAllRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tag.GetTagAllRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.GetTagAllRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of GetTagAllRequest as accepted by the `fromObject` method.
 * @record
 */
proto.tag.GetTagAllRequest.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.page;

  /** @type {?|undefined} */
  this.pagesize;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.tag.GetTagAllRequest.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.tag.GetTagAllRequest}
 */
proto.tag.GetTagAllRequest.fromObject = function(obj) {
  var msg = new proto.tag.GetTagAllRequest();
  obj.page != null && jspb.Message.setField(msg, 1, obj.page);
  obj.pagesize != null && jspb.Message.setField(msg, 2, obj.pagesize);
  return msg;
};
}

/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.tag.GetTagAllRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tag.GetTagAllRequest} returns this
 */
proto.tag.GetTagAllRequest.prototype.setPage = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tag.GetTagAllRequest} returns this
 */
proto.tag.GetTagAllRequest.prototype.clearPage = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tag.GetTagAllRequest.prototype.hasPage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 pageSize = 2;
 * @return {number}
 */
proto.tag.GetTagAllRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tag.GetTagAllRequest} returns this
 */
proto.tag.GetTagAllRequest.prototype.setPagesize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tag.GetTagAllResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tag.GetTagAllResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tag.GetTagAllResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tag.GetTagAllResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.GetTagAllResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.tag.Tag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tag.GetTagAllResponse}
 */
proto.tag.GetTagAllResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tag.GetTagAllResponse;
  return proto.tag.GetTagAllResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tag.GetTagAllResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tag.GetTagAllResponse}
 */
proto.tag.GetTagAllResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 2:
      var value = new proto.tag.Tag;
      reader.readMessage(value,proto.tag.Tag.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tag.GetTagAllResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tag.GetTagAllResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tag.GetTagAllResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.GetTagAllResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tag.Tag.serializeBinaryToWriter
    );
  }
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of GetTagAllResponse as accepted by the `fromObject` method.
 * @record
 */
proto.tag.GetTagAllResponse.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.count;

  /** @type {?|undefined} */
  this.dataList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.tag.GetTagAllResponse.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.tag.GetTagAllResponse}
 */
proto.tag.GetTagAllResponse.fromObject = function(obj) {
  var msg = new proto.tag.GetTagAllResponse();
  obj.count != null && jspb.Message.setField(msg, 1, obj.count);
  obj.dataList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.dataList.map(
          proto.tag.Tag.fromObject));
  return msg;
};
}

/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.tag.GetTagAllResponse.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tag.GetTagAllResponse} returns this
 */
proto.tag.GetTagAllResponse.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Tag data = 2;
 * @return {!Array<!proto.tag.Tag>}
 */
proto.tag.GetTagAllResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.tag.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tag.Tag, 2));
};


/**
 * @param {!Array<!proto.tag.Tag>} value
 * @return {!proto.tag.GetTagAllResponse} returns this
*/
proto.tag.GetTagAllResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tag.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tag.Tag}
 */
proto.tag.GetTagAllResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tag.Tag, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tag.GetTagAllResponse} returns this
 */
proto.tag.GetTagAllResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tag.Tag.prototype.toObject = function(opt_includeInstance) {
  return proto.tag.Tag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tag.Tag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.Tag.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    listid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tag.Tag}
 */
proto.tag.Tag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tag.Tag;
  return proto.tag.Tag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tag.Tag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tag.Tag}
 */
proto.tag.Tag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setListid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tag.Tag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tag.Tag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tag.Tag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.Tag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getListid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Tag as accepted by the `fromObject` method.
 * @record
 */
proto.tag.Tag.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.listid;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.tag.Tag.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.tag.Tag}
 */
proto.tag.Tag.fromObject = function(obj) {
  var msg = new proto.tag.Tag();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.name != null && jspb.Message.setField(msg, 2, obj.name);
  obj.listid != null && jspb.Message.setField(msg, 3, obj.listid);
  return msg;
};
}

/**
 * optional string id = 1;
 * @return {string}
 */
proto.tag.Tag.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.Tag} returns this
 */
proto.tag.Tag.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.tag.Tag.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.Tag} returns this
 */
proto.tag.Tag.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string listId = 3;
 * @return {string}
 */
proto.tag.Tag.prototype.getListid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.Tag} returns this
 */
proto.tag.Tag.prototype.setListid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tag.List.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tag.List.prototype.toObject = function(opt_includeInstance) {
  return proto.tag.List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tag.List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.List.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    content: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdat: jspb.Message.getFieldWithDefault(msg, 4, ""),
    updatedat: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tagList: jspb.Message.toObjectList(msg.getTagList(),
    proto.tag.Tag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tag.List}
 */
proto.tag.List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tag.List;
  return proto.tag.List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tag.List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tag.List}
 */
proto.tag.List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedat(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedat(value);
      break;
    case 6:
      var value = new proto.tag.Tag;
      reader.readMessage(value,proto.tag.Tag.deserializeBinaryFromReader);
      msg.addTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tag.List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tag.List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tag.List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tag.List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatedat();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUpdatedat();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTagList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.tag.Tag.serializeBinaryToWriter
    );
  }
};


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of List as accepted by the `fromObject` method.
 * @record
 */
proto.tag.List.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.title;

  /** @type {?|undefined} */
  this.content;

  /** @type {?|undefined} */
  this.createdat;

  /** @type {?|undefined} */
  this.updatedat;

  /** @type {?|undefined} */
  this.tagList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.tag.List.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.tag.List}
 */
proto.tag.List.fromObject = function(obj) {
  var msg = new proto.tag.List();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.title != null && jspb.Message.setField(msg, 2, obj.title);
  obj.content != null && jspb.Message.setField(msg, 3, obj.content);
  obj.createdat != null && jspb.Message.setField(msg, 4, obj.createdat);
  obj.updatedat != null && jspb.Message.setField(msg, 5, obj.updatedat);
  obj.tagList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.tagList.map(
          proto.tag.Tag.fromObject));
  return msg;
};
}

/**
 * optional string id = 1;
 * @return {string}
 */
proto.tag.List.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.List} returns this
 */
proto.tag.List.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.tag.List.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.List} returns this
 */
proto.tag.List.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.tag.List.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.List} returns this
 */
proto.tag.List.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string createdAt = 4;
 * @return {string}
 */
proto.tag.List.prototype.getCreatedat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.List} returns this
 */
proto.tag.List.prototype.setCreatedat = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string updatedAt = 5;
 * @return {string}
 */
proto.tag.List.prototype.getUpdatedat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.tag.List} returns this
 */
proto.tag.List.prototype.setUpdatedat = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated Tag tag = 6;
 * @return {!Array<!proto.tag.Tag>}
 */
proto.tag.List.prototype.getTagList = function() {
  return /** @type{!Array<!proto.tag.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tag.Tag, 6));
};


/**
 * @param {!Array<!proto.tag.Tag>} value
 * @return {!proto.tag.List} returns this
*/
proto.tag.List.prototype.setTagList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.tag.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tag.Tag}
 */
proto.tag.List.prototype.addTag = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.tag.Tag, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tag.List} returns this
 */
proto.tag.List.prototype.clearTagList = function() {
  return this.setTagList([]);
};


goog.object.extend(exports, proto.tag);
